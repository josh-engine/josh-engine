name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  cmake-macos-vulkan:
    name: CMake MacOS Build (Vulkan)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Dependencies
        run: brew bundle install --file=${{github.workspace}}/Brewfile

      - name: Cache CMake Build
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-vulkan

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


  cmake-ubuntu-vulkan:
    name: CMake Ubuntu Build (Vulkan)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Dependencies
        run: sudo apt-get install libglfw3 libglfw3-dev libglm-dev libvulkan-dev vulkan-validationlayers-dev spirv-tools libopenal-dev && brew install glslang

      - name: Cache Cmake Build
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-vulkan

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  cmake-windows-vulkan:
    name: CMake Windows Build (Vulkan)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install Conan
        run: pip install conan

      - name: Cache Conan Dependencies
        id: cache-conan
        uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\.conan2
          key: ${{runner.os}}-conan-${{hashFiles('**/conan_vk.txt')}}

      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Create default profile
        run: conan profile detect

      - name: Install Dependencies
        run: conan install ${{github.workspace}}\conan_vk.txt -s build_type=${{env.BUILD_TYPE}} --build=missing

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}\build\generators\conan_toolchain.cmake

      - name: Build
        run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

  cmake-ubuntu-wgpu:
    name: CMake Ubuntu Build (WGPU)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get install libglfw3 libglfw3-dev libglm-dev libopenal-dev

      - name: Get submodules
        run: git submodule update --init --remote --recursive

      - name: Cache Cmake Build
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-wgpu

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DJE_API_VK:BOOL=OFF -DJE_API_WEBGPU:BOOL=ON -DWEBGPU_BACKEND=WGPU

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}